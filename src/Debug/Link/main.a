;/*
; * microproj2.c
; *
; * Created: 12/29/2019 9:56:02 PM
; * Author: kh alamatsaz
; */
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include <lcd.h>
;#include <io.h>
;#include <stdio.h>
;
;#asm (".equ __lcd_port=0x15");
;PCODE: $0000000D VOL: 0
	.equ __lcd_port=0x15
;PCODE: $0000000E VOL: 0
;
;unsigned int READ_ADC (unsigned char adc_input) {
; 0000 0011 unsigned int READ_ADC (unsigned char adc_input) {

	.CSEG
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0012   ADMUX = adc_input | 0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	adc_input -> R17
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0013   delay_us(10);
;PCODE: $00000016 VOL: 0
; 0000 0014   ADCSRA |= 0x40;        //start the conversion
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0015 
; 0000 0016   lcd_clear();
;PCODE: $00000019 VOL: 0
; 0000 0017   lcd_puts("C");
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0018 
; 0000 0019   while ((ADCSRA & 0x10)==0);        //wait for the AD conversion to complete
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001A 
; 0000 001B   lcd_clear();
;PCODE: $00000023 VOL: 0
; 0000 001C   lcd_puts("D");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001D 
; 0000 001E   ADCSRA |=0x10;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001F   return ADCW;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0020 }
;PCODE: $0000002C VOL: 0

	.DSEG
_0x3:
	.BYTE 0x4
;
;
;
;interrupt [EXT_INT0] void pushbutton (void) {
; 0000 0024 interrupt [2] void pushbutton (void) {

	.CSEG
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0025   PORTB.0=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0026   PORTB.1=0;         //turn off the motor
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0027   lcd_clear();
;PCODE: $00000033 VOL: 0
; 0000 0028   lcd_puts("OFF");
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0029   delay_ms(5000);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002A   lcd_clear();
;PCODE: $00000039 VOL: 0
; 0000 002B }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0

	.DSEG
_0xB:
	.BYTE 0x4
;
;
;void main(void) {
; 0000 002E void main(void) {

	.CSEG
;PCODE: $0000003D VOL: 0
; 0000 002F   int temp ;
; 0000 0030   int cnt=0;
; 0000 0031   char buffer[50];
; 0000 0032 
; 0000 0033   DDRA.0=0;
;PCODE: $0000003E VOL: 0
;	temp -> R16,R17
;	cnt -> R18,R19
;	buffer -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0034   PORTA.0=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0035   lcd_init(16);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0036   ADMUX=0b01100000;               //ADC0 , Vref=AVCC , left align
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0037   ADCSRA=0b10000111;              //division factor 128
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0038   //ADCSRA = ADCSRA | 1<<ADATE;     //Automatic triger enable
; 0000 0039   //SFIOR = SFIOR & 00011111;        //free runing mode (ADIF)
; 0000 003A   DDRB.0=1;             //L298 output
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003B   DDRB.1=1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003C   MCUCR=0b00000010;              // falling edge
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003D 
; 0000 003E   lcd_clear();
;PCODE: $00000051 VOL: 0
; 0000 003F   lcd_puts("A");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0040 
; 0000 0041   //GICR=1<<INT0;                  //int0 enable
; 0000 0042   //    #asm("sei")
; 0000 0043 
; 0000 0044 
; 0000 0045   while (1) {
;PCODE: $00000055 VOL: 0
; 0000 0046     // Please write your application code here
; 0000 0047     lcd_clear();
;PCODE: $00000056 VOL: 0
; 0000 0048     lcd_puts("B");
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0049 
; 0000 004A     temp = READ_ADC(0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004B 
; 0000 004C     lcd_clear();
;PCODE: $0000005D VOL: 0
; 0000 004D     lcd_puts("E");
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004E 
; 0000 004F     cnt += 1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0050     sprintf(buffer,"%d",cnt);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0051     lcd_puts(buffer);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0052     lcd_puts(" ");
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0053 
; 0000 0054     sprintf(buffer,"%d",temp);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0055     lcd_puts(buffer);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0056 
; 0000 0057     delay_ms(500);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0058 
; 0000 0059     if (temp<550) {                   //v<2.7 (552.42)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005A       // ADCSRA |= 0b01000000;          //start conversion
; 0000 005B       PORTB.0=1;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005C       PORTB.1=0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005D       lcd_clear();
;PCODE: $0000008B VOL: 0
; 0000 005E       lcd_puts("CW");
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005F     }
; 0000 0060     else if (temp>820) {              //v>4 ((818.4)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0061       // ADCSRA |= 0b01000000;          //start conversion
; 0000 0062       PORTB.0=0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0063       PORTB.1=1;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0064       lcd_clear();
;PCODE: $00000098 VOL: 0
; 0000 0065       lcd_puts("CCW");
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0066     }
; 0000 0067   }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0068 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0

	.DSEG
_0x14:
	.BYTE 0xF
